/*
 * Copyright 2010 Red Hat, Inc. and/or its affiliates.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.optaplanner.examples.taskassigning.solver;
    dialect "java"

import org.optaplanner.core.api.score.buildin.bendable.BendableScoreHolder;
import org.optaplanner.examples.taskassigning.domain.Machine;
import org.optaplanner.examples.taskassigning.domain.Type;
import org.optaplanner.examples.taskassigning.domain.Task;
import org.optaplanner.examples.taskassigning.domain.TaskAssigningSolution;
import org.optaplanner.examples.taskassigning.domain.TaskType
import org.optaplanner.examples.taskassigning.domain.Duedate;

global BendableScoreHolder scoreHolder;

// ############################################################################
// Hard constraints
// ############################################################################


rule "Type requirements"
    when
        Task(machine != null, missingTypeCount > 0, $missingTypeCount : missingTypeCount)
    then
        scoreHolder.addHardConstraintMatch(kcontext, 0, - $missingTypeCount);
end

rule "volume"
    when
        $machine : Machine($volume : volume)
            Task(
                machine == $machine,
                volume > $volume);
    then
        scoreHolder.addHardConstraintMatch(kcontext, 0, -1);
end
// ############################################################################
// Soft constraints
// ############################################################################

rule "Minimze makespan (starting with the latest ending employee first)"
    when
        Task(machine != null, nextTask == null, $endTime : endTime)
    then
        // Fairness and load balancing trick (see docs): squared to assure correctness in corner cases
        scoreHolder.addSoftConstraintMatch(kcontext, 0, - ($endTime * $endTime));
end
